{"version":3,"sources":["components/Navbar.js","api/Api.js","img/vs.png","components/MatchCard.js","App.js","reportWebVitals.js","index.js"],"names":["Navbar","AppBar","position","Toolbar","Typography","variant","color","style","marginLeft","API_KEY","MatchCard","match","useState","detail","setdetails","open","setopen","handleClick","id","url","fetch","then","response","json","catch","e","console","log","getMatchDetail","data","handleopen","WhiteTextTypography","withStyles","root","handleclose","Card","border","marginTop","backgroundColor","CardContent","Grid","container","justify","alignItems","spacing","item","sm","width","src","Image","CardActions","Button","onClick","unique_id","marginRight","Date","dateTimeGMT","toLocaleString","Dialog","onClose","DialogTitle","DialogContent","DialogContentText","stat","matchStarted","DialogActions","App","matches","setMatches","useEffect","getMatches","error","className","map","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.63976f32.chunk.js","sourcesContent":["import { AppBar, Toolbar, Typography } from '@material-ui/core';\nimport React from 'react';\n\nconst Navbar=()=>{\n    return (\n        <AppBar position=\"static\">\n            <Toolbar>\n                <Typography variant=\"h6\" color=\"inherit\" style={{marginLeft:20}}> Live Scores</Typography>\n            </Toolbar>\n        </AppBar>\n    )\n};\n\nexport default Navbar;","const API_KEY = \"zHzyyhs01IfxWfTZD0KWE5Uc6hF2\"\n\nexport const getMatches =()=> {\n\n    const url = ` https://cricapi.com/api/matches?apikey=${API_KEY}`;\n    return fetch(url).then((response)=>response.json()).catch((e)=>console.log(e));\n}\n\nexport const getMatchDetail =(id) => {\n    const url = ` https://cricapi.com/api/cricketScore?apikey=${API_KEY}&unique_id=${id}`\n    return fetch(url).\n    then((response)=>response.json()).catch(e=>console.log(e));\n}","export default __webpack_public_path__ + \"static/media/vs.c4bd7dc9.png\";","import { Button, Card, CardActions, CardContent, Dialog,DialogContentText, DialogActions, DialogTitle, Grid, Typography, DialogContent } from '@material-ui/core';\nimport { dark } from '@material-ui/core/styles/createPalette';\nimport { withStyles } from '@material-ui/styles';\nimport React, { Fragment, useState } from 'react';\nimport { getMatchDetail } from '../api/Api';\nimport Image from '../img/vs.png'\n\nconst MatchCard = ({match})=> {\n    \n    const[detail,setdetails]=useState({});\n    const[open,setopen]=useState(false)\n    const handleClick=(id)=>{\n            getMatchDetail(id).\n            then((data)=>{setdetails(data)\n            handleopen()\n            console.log(data)})\n\n            .catch(e => console.log(e));\n    };\n    const WhiteTextTypography = withStyles({\n        root: {\n          color: \"#FFFFFF\"\n        }\n      })(Typography);\n    const makecard=()=>{\n        return(\n            <Card border=\"primary\" style={{marginTop:20,backgroundColor:\"#2C3539\"}} >\n                <CardContent>\n                    <Grid container justify=\"center\" alignItems=\"center\" spacing='4'>\n                        <Grid item sm=\"5\"> <WhiteTextTypography  variant=\"h4\">{match[\"team-1\"]}</WhiteTextTypography> </Grid>\n                        <Grid item>\n                        <img style={{width:85}} src={Image}/>\n                        </Grid>\n                        <Grid item sm=\"5\"><WhiteTextTypography variant=\"h4\">{match[\"team-2\"]}</WhiteTextTypography></Grid>\n                    </Grid>\n                <CardActions>\n\n                </CardActions>\n                <Grid container justify=\"center\"style={{marginTop:2}} >\n                    <Button  onClick={()=>handleClick(match.unique_id)}style={{marginRight:5,marginTop:5}} variant=\"contained\" color=\"secondary\">Show Details</Button>\n                    <Button style={{marginTop:5}} variant=\"contained\" color=\"primary\">\n                    Start Time {new Date(match.dateTimeGMT).toLocaleString()}\n                    </Button>\n                </Grid>\n                </CardContent>\n            </Card>\n        )\n    }\n    const handleclose=()=>{\n        setopen(false)\n    }\n\n    const handleopen =()=>{\n        setopen(true)\n    }\n    const getDialog =()=>(\n        <Dialog open={open} onClose={handleclose}>\n            <DialogTitle id=\"alert-dialog-title\">{\"DETAILS OF THE MATCH\"}</DialogTitle>\n            <DialogContent>\n            <DialogContentText id=\"alert-dialog-description\">\n                <Typography> \n                {detail.stat}\n                </Typography>\n                <Typography>\n                Match <span>\n                 {detail.matchStarted ? \"Started\" : \"Not Started\" }\n                 </span>\n                </Typography>\n            </DialogContentText>\n            </DialogContent>\n        <DialogActions >\n            <button onClick={handleclose}> Close</button>\n        </DialogActions>\n        </Dialog>\n    );\n    return(\n         <Fragment>\n         {makecard()}\n         {getDialog()}\n         </Fragment>\n    );\n}\nexport default MatchCard;","import React ,{useEffect, useState} from 'react'\nimport './App.css';\nimport Navbar from './components/Navbar';\nimport {getMatches} from './api/Api'\nimport MatchCard from './components/MatchCard';\nimport { Grid, Typography } from '@material-ui/core';\nfunction App() {\n\n    const [matches,setMatches]= useState([]);\n  useEffect(() => \n  {\n    getMatches().then((data)=> {setMatches(data.matches)\n    console.log(data.matches)\n    })\n    .catch( error => console.log(error))\n  },[]);\n  \n  return (\n    <div className=\"App\">\n        <Navbar/>\n        <Typography variant=\"h3\" style={{marginTop:10,color:\"black\"}}>Welcome to LIVE SCORE APP</Typography>\n        <Grid container>\n          <Grid sm=\"3\">\n          </Grid>\n          <Grid sm=\"6\">\n          {matches.map((match) => (\n            <MatchCard key={match.unique_id} match ={match}/>\n          ))}\n          </Grid>\n        </Grid>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}